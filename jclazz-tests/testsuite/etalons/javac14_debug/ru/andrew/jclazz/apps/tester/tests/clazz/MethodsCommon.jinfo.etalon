This Class  : ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon
Super Class : java.lang.Object
Implemented Interfaces:

Version: 46.0
JVM supported: 1.2 and greater

Access Flags: 1057 ( PUBLIC  SUPER  ABSTRACT )

Attributes:
@SourceFile: MethodsCommon.java

Fields:
class$java$lang$Integer : java.lang.Class
{
    Access Flags: 8 ( STATIC )

    Attributes:
        @Synthetic
}


Methods:
<init> : () : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 1
        Attributes:
            @LineNumberTable:
                0: line 10
                4: line 11
                12: line 12
            @LocalVariableTable: 
                0+13: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
        Exceptions:
       )
    {
        0 aload_0
        1 invokespecial <init>
        4 getstatic java.lang.System.out
        7 ldc "DEFAULT CONSTRUCTOR" (java.lang.String)
        9 invokevirtual println
        12 return
    }
}

<init> : (java.lang.String) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 2
        Attributes:
            @LineNumberTable:
                0: line 15
                4: line 16
                12: line 17
            @LocalVariableTable: 
                0+13: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
                0+13: initVar (Ljava/lang/String;), 1
        Exceptions:
       )
    {
        0 aload_0
        1 invokespecial <init>
        4 getstatic java.lang.System.out
        7 ldc "ADDITIONAL CONSTRUCTOR" (java.lang.String)
        9 invokevirtual println
        12 return
    }
}

test1 : () : void
{
    Access Flags: 2 ( PRIVATE )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 1
        Attributes:
            @LineNumberTable:
                0: line 21
                8: line 22
            @LocalVariableTable: 
                0+9: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "PRIVATE METHOD" (java.lang.String)
        5 invokevirtual println
        8 return
    }
}

test2 : () : void
{
    Access Flags: 4 ( PROTECTED )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 1
        Attributes:
            @LineNumberTable:
                0: line 26
                8: line 27
            @LocalVariableTable: 
                0+9: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "PROTECTED METHOD" (java.lang.String)
        5 invokevirtual println
        8 return
    }
}

test3 : () : void
{
    Access Flags: 9 ( PUBLIC  STATIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 0
        Attributes:
            @LineNumberTable:
                0: line 31
                8: line 32
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "STATIC METHOD" (java.lang.String)
        5 invokevirtual println
        8 return
    }
}

test4 : () : void
{
    Access Flags: 17 ( PUBLIC  FINAL )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 1
        Attributes:
            @LineNumberTable:
                0: line 36
                8: line 37
            @LocalVariableTable: 
                0+9: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "FINAL METHOD" (java.lang.String)
        5 invokevirtual println
        8 return
    }
}

test5 : () : void
{
    Access Flags: 33 ( PUBLIC  SYNCHRONIZED )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 1
        Attributes:
            @LineNumberTable:
                0: line 41
                8: line 42
            @LocalVariableTable: 
                0+9: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "SYNC METHOD" (java.lang.String)
        5 invokevirtual println
        8 return
    }
}

test6 : () : void
{
    Access Flags: 257 ( PUBLIC  NATIVE )

    Attributes:
}

test7 : () : void
{
    Access Flags: 1025 ( PUBLIC  ABSTRACT )

    Attributes:
}

test8 : () : void
{
    Access Flags: 2049 ( PUBLIC  STRICT )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 1
        Attributes:
            @LineNumberTable:
                0: line 50
                8: line 51
            @LocalVariableTable: 
                0+9: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "STRICTFP METHOD" (java.lang.String)
        5 invokevirtual println
        8 return
    }
}

test9 : (java.lang.String, java.io.PrintWriter, int, boolean) : java.math.BigInteger
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    @Exceptions: 
            java.lang.IllegalArgumentException
            java.lang.ClassNotFoundException
            java.lang.IllegalAccessException
            java.lang.InstantiationException
    CODE
       (
        Max stack = 2
        Max locals = 5
        Attributes:
            @LineNumberTable:
                0: line 55
                9: line 56
            @LocalVariableTable: 
                0+14: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
                0+14: par1 (Ljava/lang/String;), 1
                0+14: pw (Ljava/io/PrintWriter;), 2
                0+14: k (I), 3
                0+14: b (Z), 4
        Exceptions:
       )
    {
        0 ldc "fake" (java.lang.String)
        2 invokestatic java.lang.Class.forName
        5 invokevirtual newInstance
        8 pop
        9 lconst_0
        10 invokestatic java.math.BigInteger.valueOf
        13 areturn
    }
}

test10 : (java.lang.Class) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 0
        Max locals = 2
        Attributes:
            @LineNumberTable:
                0: line 61
            @LocalVariableTable: 
                0+1: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
                0+1: cl (Ljava/lang/Class;), 1
        Exceptions:
       )
    {
        0 return
    }
}

test11 : () : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 3
        Max locals = 1
        Attributes:
            @LineNumberTable:
                0: line 65
                25: line 66
            @LocalVariableTable: 
                0+26: this (Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;), 0
        Exceptions:
       )
    {
        0 aload_0
        1 getstatic ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon.class$java$lang$Integer
        4 ifnonnull 19
        7 ldc "java.lang.Integer" (java.lang.String)
        9 invokestatic ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon.class$
        12 dup
        13 putstatic ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon.class$java$lang$Integer
        16 goto 22
        19 getstatic ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon.class$java$lang$Integer
        22 invokevirtual test10
        25 return
    }
}

test12 : (java.lang.String) : void
{
    Access Flags: 1025 ( PUBLIC  ABSTRACT )

    Attributes:
}

class$ : (java.lang.String) : java.lang.Class
{
    Access Flags: 8 ( STATIC )

    Attributes:
    @Synthetic
    CODE
       (
        Max stack = 3
        Max locals = 2
        Attributes:
            @LineNumberTable:
                0: line 65
            @LocalVariableTable: 
                6+12: x1 (Ljava/lang/ClassNotFoundException;), 1
                0+18: x0 (Ljava/lang/String;), 0
        Exceptions:
            [0-4): 5 - java.lang.ClassNotFoundException
       )
    {
        0 aload_0
        1 invokestatic java.lang.Class.forName
        4 areturn
        5 astore_1
        6 new java.lang.NoClassDefFoundError
        9 dup
        10 aload_1
        11 invokevirtual getMessage
        14 invokespecial <init>
        17 athrow
    }
}

<clinit> : () : void
{
    Access Flags: 8 ( STATIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 0
        Attributes:
            @LineNumberTable:
                0: line 72
                8: line 73
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "STATIC" (java.lang.String)
        5 invokevirtual println
        8 return
    }
}

Constant Pool:
0: 
1: Methodref: java.lang.Class.forName ((Ljava/lang/String;)Ljava/lang/Class;)
2: Class: java.lang.ClassNotFoundException
3: Class: java.lang.NoClassDefFoundError
4: Methodref: java.lang.ClassNotFoundException.getMessage (()Ljava/lang/String;)
5: Methodref: java.lang.NoClassDefFoundError.<init> ((Ljava/lang/String;)V)
6: Methodref: java.lang.Object.<init> (()V)
7: Fieldref: java.io.PrintStream
8: String: "DEFAULT CONSTRUCTOR"
9: Methodref: java.io.PrintStream.println ((Ljava/lang/String;)V)
10: String: "ADDITIONAL CONSTRUCTOR"
11: String: "PRIVATE METHOD"
12: String: "PROTECTED METHOD"
13: String: "STATIC METHOD"
14: String: "FINAL METHOD"
15: String: "SYNC METHOD"
16: String: "STRICTFP METHOD"
17: String: "fake"
18: Methodref: java.lang.Class.newInstance (()Ljava/lang/Object;)
19: Methodref: java.math.BigInteger.valueOf ((J)Ljava/math/BigInteger;)
20: Fieldref: java.lang.Class
21: String: "java.lang.Integer"
22: Methodref: ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon.class$ ((Ljava/lang/String;)Ljava/lang/Class;)
23: Methodref: ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon.test10 ((Ljava/lang/Class;)V)
24: String: "STATIC"
25: Class: ru.andrew.jclazz.apps.tester.tests.clazz.MethodsCommon
26: Class: java.lang.Object
27: Utf8: class$java$lang$Integer
28: Utf8: Ljava/lang/Class;
29: Utf8: Synthetic
30: Utf8: <init>
31: Utf8: ()V
32: Utf8: Code
33: Utf8: LineNumberTable
34: Utf8: LocalVariableTable
35: Utf8: this
36: Utf8: Lru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon;
37: Utf8: (Ljava/lang/String;)V
38: Utf8: initVar
39: Utf8: Ljava/lang/String;
40: Utf8: test1
41: Utf8: test2
42: Utf8: test3
43: Utf8: test4
44: Utf8: test5
45: Utf8: test6
46: Utf8: test7
47: Utf8: test8
48: Utf8: test9
49: Utf8: (Ljava/lang/String;Ljava/io/PrintWriter;IZ)Ljava/math/BigInteger;
50: Utf8: par1
51: Utf8: pw
52: Utf8: Ljava/io/PrintWriter;
53: Utf8: k
54: Utf8: I
55: Utf8: b
56: Utf8: Z
57: Utf8: Exceptions
58: Class: java.lang.IllegalArgumentException
59: Class: java.lang.IllegalAccessException
60: Class: java.lang.InstantiationException
61: Utf8: test10
62: Utf8: (Ljava/lang/Class;)V
63: Utf8: cl
64: Utf8: test11
65: Utf8: test12
66: Utf8: class$
67: Utf8: (Ljava/lang/String;)Ljava/lang/Class;
68: Utf8: x1
69: Utf8: Ljava/lang/ClassNotFoundException;
70: Utf8: x0
71: Utf8: <clinit>
72: Utf8: SourceFile
73: Utf8: MethodsCommon.java
74: Class: java.lang.Class
75: NameAndType: forName ((Ljava/lang/String;)Ljava/lang/Class;)
76: Utf8: java/lang/ClassNotFoundException
77: Utf8: java/lang/NoClassDefFoundError
78: NameAndType: getMessage (()Ljava/lang/String;)
79: NameAndType: <init> ((Ljava/lang/String;)V)
80: NameAndType: <init> (()V)
81: Class: java.lang.System
82: NameAndType: out (Ljava/io/PrintStream;)
83: Utf8: DEFAULT CONSTRUCTOR
84: Class: java.io.PrintStream
85: NameAndType: println ((Ljava/lang/String;)V)
86: Utf8: ADDITIONAL CONSTRUCTOR
87: Utf8: PRIVATE METHOD
88: Utf8: PROTECTED METHOD
89: Utf8: STATIC METHOD
90: Utf8: FINAL METHOD
91: Utf8: SYNC METHOD
92: Utf8: STRICTFP METHOD
93: Utf8: fake
94: NameAndType: newInstance (()Ljava/lang/Object;)
95: Class: java.math.BigInteger
96: NameAndType: valueOf ((J)Ljava/math/BigInteger;)
97: NameAndType: class$java$lang$Integer (Ljava/lang/Class;)
98: Utf8: java.lang.Integer
99: NameAndType: class$ ((Ljava/lang/String;)Ljava/lang/Class;)
100: NameAndType: test10 ((Ljava/lang/Class;)V)
101: Utf8: STATIC
102: Utf8: ru/andrew/jclazz/apps/tester/tests/clazz/MethodsCommon
103: Utf8: java/lang/Object
104: Utf8: java/lang/IllegalArgumentException
105: Utf8: java/lang/IllegalAccessException
106: Utf8: java/lang/InstantiationException
107: Utf8: java/lang/Class
108: Utf8: forName
109: Utf8: getMessage
110: Utf8: ()Ljava/lang/String;
111: Utf8: java/lang/System
112: Utf8: out
113: Utf8: Ljava/io/PrintStream;
114: Utf8: java/io/PrintStream
115: Utf8: println
116: Utf8: newInstance
117: Utf8: ()Ljava/lang/Object;
118: Utf8: java/math/BigInteger
119: Utf8: valueOf
120: Utf8: (J)Ljava/math/BigInteger;
