package Client;

import java.util.*;
import javax.swing.*;
import java.io.*;
import java.net.*;
import org.jdom.input.*;
import org.jdom.*;

public class Reciever extends Thread
{
    private Socket server;
    private Sender sender;
    private MordaFunc morda;
    private BufferedReader fromServer;
    private SAXBuilder sax;
    private Document message;
    private String cmdS;
    private String fromS;
    private String messageS;
    private boolean exit;

    Reciever(Sender sender_1, Socket socket_1, MordaFunc mordafunc_1) throws IOException
    {
        exit = true;
        server = socket_1;
        morda = mordafunc_1;
        sender = sender_1;
        fromServer = new BufferedReader(new InputStreamReader(socket_1.getInputStream(), "UTF-8"));
        sax = new SAXBuilder();
        message = new Document();
    }
    
    public void run()
    {
        while (exit)
        {
            getMessage();
            if (cmdS.equalsIgnoreCase("connect"))
            {
                if (!messageS.equalsIgnoreCase("accept"))
                {
                    Object[] objects_1 = new Object[]{"Exit"};
                    JOptionPane.showOptionDialog(morda.getFrame(), new StringBuffer().append("Server: ").append(messageS).toString(), "ServerError", -1, 2, null, objects_1, objects_1[0]);
                    System.exit(1);
                }
                else
                {
                    morda.addStatusText("CS-chat server available");
                }
            }
            if (cmdS.equalsIgnoreCase("disconnect"))
            {
                exit = false;
                try
                {
                    server.close();
                }
                catch (IOException ioexception_1)
                {
                    sender.connectServer();
                }
                Object[] objects_2 = new Object[]{"Exit"};
                JOptionPane.showOptionDialog(morda.getFrame(), new StringBuffer().append("Server: ").append(messageS).toString(), "ServerError", -1, 2, null, objects_2, objects_2[0]);
                System.exit(1);
            }
            if (cmdS.equalsIgnoreCase("getusers"))
            {
                String[] strings_1 = new String[new Integer(messageS).intValue()];
                List list_1 = message.getRootElement().getChildren("USERLIST");
                int int_1 = 0;
                while (int_1 < list_1.size())
                {
                    strings_1[int_1] = ((Element) list_1.get(int_1)).getText();
                    int_1++;
                }
                morda.setUserList(strings_1);
            }
            if (cmdS.equalsIgnoreCase("message"))
            {
                morda.addOutputText(new StringBuffer().append(fromS).append(" : ").append(messageS).append("\n").toString());
            }
        }
    }
    
    void getMessage()
    {
        String string_1 = "";
        try
        {
            do
            {
                String string_2 = fromServer.readLine();
                string_1 = new StringBuffer().append(string_1).append(string_2).toString();
            }
            while (!string_2.endsWith("</packet>"));
        }
        catch (IOException ioexception_1)
        {
            try
            {
                server = sender.connectServer();
                fromServer = new BufferedReader(new InputStreamReader(server.getInputStream(), "UTF-8"));
                cmdS = "up";
                return;
            }
            catch (IOException ioexception_2)
            {
            }
        }
        try
        {
            message = sax.build(new StringReader(string_1), "CMESSAGE.dtd");
        }
        catch (Exception exception_1)
        {
            System.out.println(exception_1);
        }
        cmdS = message.getRootElement().getChildText("COMMAND");
        fromS = message.getRootElement().getChildText("FROM");
        message.getRootElement().getChildText("TO");
        messageS = message.getRootElement().getChildText("MESSAGE");
    }
    
}
