package Client;

import javax.swing.*;
import org.jdom.output.*;
import java.io.*;
import java.net.*;
import MessageXML.*;

public class Sender
{
    private final int maxLength = 256;
    private final int serverPort = 20003;
    public static final int SEND_MESSAGE = 31;
    public static final int DISCONNECT_MESSAGE = 13;
    private Socket server;
    private String serverIP;
    private MordaFunc morda;
    private OutputStream toServer;
    private String login;
    private Message message;
    private XMLOutputter xmlOutputter;

    Sender(String string_1, MordaFunc mordafunc_1, String string_2)
    {
        login = string_2;
        serverIP = string_1;
        morda = mordafunc_1;
        message = new Message();
        xmlOutputter = new XMLOutputter();
        connectServer();
        try
        {
            Reciever reciever_1 = new Reciever(this, server, mordafunc_1);
            reciever_1.start();
        }
        catch (IOException ioexception_1)
        {
            Object[] objects_1 = new Object[]{"Exit"};
            JOptionPane.showOptionDialog(mordafunc_1.getFrame(), "Unable to start reciever", "Error", -1, 2, null, objects_1, objects_1[0]);
        }
    }
    
    public Socket connectServer()
    {
        int int_1 = 0;
        do
        {
            try
            {
                server = new Socket(serverIP, 20003);
                if (null != server)
                {
                    int_1 = 0;
                    toServer = server.getOutputStream();
                    message.setText("connect", login, "server", "server connection request");
                    sendMessage();
                }
            }
            catch (IOException ioexception_1)
            {
                Object[] objects_1 = new Object[]{"Retry", "Exit"};
                int int_2 = JOptionPane.showOptionDialog(morda.getFrame(), "Server is unavailable\nClick Retry to try again", "Error", -1, 2, null, objects_1, objects_1[0]);
                if ((int_2 == -1) || (int_2 == 1))
                {
                    System.exit(0);
                }
                if (0 == int_2)
                {
                    int_1 = 1;
                }
            }
        }
        while (0 != int_1);
        return server;
    }
    
    public void exec(int int_1)
    {
        if (null != server)
        {
            switch (int_1)
            {
                case 13:
                    message.setText("disconnect", login, "server", "close connection");
                    sendMessage();
            }
        }
    }
    
    public void exec(int int_1, String string_1, String string_2)
    {
        switch (int_1)
        {
            case 31:
                if (string_2.length() < 256)
                {
                    morda.addOutputText(new StringBuffer().append("--to ").append(morda.getUser()).append(" : ").append(morda.getInputText()).append("\n").toString());
                    message.setText("send", login, string_1, string_2);
                    sendMessage();
                }
                else
                {
                    Object[] objects_1 = new Object[]{"Cancel"};
                    JOptionPane.showOptionDialog(morda.getFrame(), "Too long message", "Warning", -1, 2, null, objects_1, objects_1[0]);
                }
        }
    }
    
    private synchronized void sendMessage()
    {
        try
        {
            xmlOutputter.output(message.getDoc(), toServer);
        }
        catch (IOException ioexception_1)
        {
            System.out.println(ioexception_1);
        }
    }
    
}
