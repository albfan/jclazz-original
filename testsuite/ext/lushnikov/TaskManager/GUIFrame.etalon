package lushnikov.TaskManager;

import java.awt.*;
import snoozesoft.systray4j.*;
import javax.swing.*;
import java.io.*;
import java.awt.event.*;

public class GUIFrame extends JFrame implements UserInterface
{
    private JournalStorage theJournalStorage;
    private IOJournal theIOJournal;
    private MainPanel mainPanel;
    private SysTrayMenu menu;
    private SysTrayMenuItem itemExit;
    public static final int DEFAULT_WIDTH = 700;
    public static final int DEFAULT_HEIGHT = 500;

    public GUIFrame()
    {
        initFormView();
        updateViewJournal();
        createSysTrayMenu();
    }
    
    public GUIFrame(JournalStorage theJournalStorage, IOJournal theIOJournal)
    {
        setTheJournalStorage(theJournalStorage);
        setTheIOJournal(theIOJournal);
        initFormView();
        updateViewJournal();
        addWListener();
        createSysTrayMenu();
    }
    
    private void addWListener()
    {
        addWindowListener(new WindowAdapter()
        {
        
            public void windowClosing(WindowEvent e)
            {
                if (null != theIOJournal)
                {
                    try
                    {
                        theIOJournal.saveToFile(".\\Settings\\journal.xml", theJournalStorage);
                    }
                    catch (IOException ioexception_1)
                    {
                        JOptionPane.showMessageDialog(getGUIFrame(), "Error when saving journal to \".\\Setings\\journal.xml\" file");
                    }
                }
                System.exit(0);
            }
            
            public void windowIconified(WindowEvent e)
            {
                setVisible(false);
            }
            
        });
    }
    
    public void setTheJournalStorage(JournalStorage theJournalStorage)
    {
        this.theJournalStorage = theJournalStorage;
    }
    
    public void setTheIOJournal(IOJournal theIOJournal)
    {
        this.theIOJournal = theIOJournal;
    }
    
    public void updateViewJournal()
    {
        JTextArea journalArea = mainPanel.getJournalTextArea();
        journalArea.setText("");
        if (null == theJournalStorage)
        {
            return;
        }
        Task[] taskArr = new Task[theJournalStorage.size()];
        theJournalStorage.toArray(taskArr);
        int i = 0;
        while (i < taskArr.length)
        {
            journalArea.append(new StringBuffer().append("\nTask â„–").append((i + 1)).append(":\n").append(taskArr[i].toString()).toString());
            i++;
        }
    }
    
    public void setGUIFrameVisible()
    {
        setVisible(true);
    }
    
    public JFrame getGUIFrame()
    {
        return this;
    }
    
    public void initFormView()
    {
        setFormSizePosition();
        loadIcon();
        setTitle("Task Manager");
        setFrameStyle("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        setPanel();
    }
    
    public void setFormSizePosition()
    {
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension screenSize = kit.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
        setSize(700, 500);
        setLocation(((screenWidth - 700) / 2), ((screenHeight - 500) / 2));
    }
    
    public void loadIcon()
    {
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.getImage(".\\Settings\\TM.gif");
        setIconImage(img);
    }
    
    public void setPanel()
    {
        mainPanel = new MainPanel();
        mainPanel.setInterfaces(theJournalStorage, this);
        Container contentPane = getContentPane();
        contentPane.add(mainPanel);
    }
    
    public void setFrameStyle(String style)
    {
        try
        {
            if (style == "")
            {
                return;
            }
            UIManager.setLookAndFeel(style);
            SwingUtilities.updateComponentTreeUI(this);
        }
        catch (Exception exception_1)
        {
        }
    }
    
    public void createSysTrayMenu()
    {
        SysTrayMenuIcon icon = new SysTrayMenuIcon(".\\Settings\\TM.ico");
        icon.addSysTrayMenuListener(new SysTrayMenuAdapter()
        {
        
            public void iconLeftDoubleClicked(SysTrayMenuEvent event)
            {
                setVisible(true);
                setExtendedState(0);
            }
            
        });
        itemExit = new SysTrayMenuItem("Exit", "exit");
        itemExit.addSysTrayMenuListener(new SysTrayMenuAdapter()
        {
        
            public void menuItemSelected(SysTrayMenuEvent event)
            {
                if (event.getActionCommand().equals("exit"))
                {
                    System.exit(0);
                }
            }
            
        });
        menu = new SysTrayMenu(icon, "Task Manager");
        menu.addItem(itemExit);
    }
    
}
