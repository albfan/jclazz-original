package weblogic;

import weblogic.ejb.spi.*;
import java.util.*;
import weblogic.utils.*;
import weblogic.kernel.*;
import weblogic.utils.classloaders.*;
import weblogic.utils.compiler.*;
import weblogic.xml.process.*;
import weblogic.ejb.container.utils.*;
import java.io.*;
import weblogic.utils.jars.*;
import weblogic.ejb.container.compliance.*;
import weblogic.ejb.container.deployer.*;
import weblogic.ejb.container.ejbc.*;
import weblogic.ejb.container.dd.xml.*;
import weblogic.tools.ui.progress.*;
import weblogic.utils.AssertionError;

public class ejbc20 extends Tool
{
    private EJBComplianceTextFormatter fmt;
    private static final boolean debug = false;
    private static final boolean verbose = false;
    private static final String EJBC_WORKING_DIR = "ejbcgen";
    private String sourceJarFileName;
    private String targetJarFileName;
    private File inputJar;
    private EjbDescriptorBean ejbDescriptor;
    private File outputDir;
    private boolean runFromCmdLine;
    private ProgressListener listener;
    private EJBCMessageCoordinator messageCoordinator;
    protected ICompilerFactory compilerFactory;
    private boolean doClose;
    private boolean createOutputJar;
    private VirtualJarFile myJar;
    private GenericClassLoader m_classLoader;
    private Class[] bugs;

    public ejbc20(String[] strings_1)
    {
        super(strings_1);
        fmt = new EJBComplianceTextFormatter();
        runFromCmdLine = true;
        compilerFactory = null;
        doClose = true;
        createOutputJar = true;
        myJar = null;
        bugs = new Class[]{Error.class, NullPointerException.class, IndexOutOfBoundsException.class, weblogic.utils.AssertionError.class};
        if (Kernel.isServer())
        {
            runFromCmdLine = false;
        }
    }

    private void setEJBCMessageListener(EJBCMessageListener ejbcmessagelistener_1)
    {
        messageCoordinator.setEJBCMessageListener(ejbcmessagelistener_1);
        ejbcmessagelistener_1.setEJBCMessageProducer(messageCoordinator);
    }

    public void setRunFromCmdLine(boolean boolean_1)
    {
        runFromCmdLine = true;
    }

    public void prepare()
    {
        opts.addFlag("nodeploy", "Do not unpack jar files into the target dir.");
        opts.setUsageArgs("<source directory or jar file> [<target directory or jar file>]");
        opts.addFlag("idl", "Generate idl for remote interfaces");
        opts.addFlag("idlOverwrite", "Always overwrite existing IDL files");
        opts.addFlag("idlVerbose", "Display verbose information for IDL generation");
        opts.addFlag("idlNoValueTypes", "Do not generate valuetypes and methods/attributes that contain them.");
        opts.addFlag("idlNoAbstractInterfaces", "Do not generate abstract interfaces and methods/attributes that contain them.");
        opts.addFlag("idlFactories", "Generate factory methods for valuetypes.");
        opts.addFlag("idlVisibroker", "Generate IDL somewhat compatible with Visibroker 4.5 C++.");
        opts.addFlag("idlOrbix", "Generate IDL somewhat compatible with Orbix 2000 2.0 C++.");
        opts.addOption("idlDirectory", "dir", "Specify the directory where IDL files will be created (default : target directory or jar)");
        opts.addFlag("iiop", "Generate CORBA stubs.");
        opts.addFlag("iiopSun", "Use Sun's rmic for generating CORBA stubs.");
        opts.markPrivate("iiopSun");
        opts.addFlag("iiopTie", "Generate CORBA skeletons, uses Sun's rmic.");
        opts.markPrivate("iiopTie");
        opts.addOption("iiopDirectory", "dir", "Specify the directory where IIOP stub files will be written (default : target directory or jar)");
        opts.addOption("idlMethodSignatures", "", "Specify the method signatures used to trigger idl code generation.");
        opts.addFlag("idlCompatibility", "Substitute structs for value types to generate CORBA 2.2 compatible IDL.");
        opts.markPrivate("idlCompatibility");
        opts.addOption("dispatchPolicy", "policy", "Specify the Dispatch Policy for this EJB");
        opts.markPrivate("dispatchPolicy");
        opts.addFlag("stickToFirstServer", "Enables sticky load balancing");
        opts.markPrivate("stickToFirstServer");
        opts.addFlag("nocompliance", "Do not run the EJB Compliance Checker.");
        opts.addFlag("forceGeneration", "Force generation of wrapper classes.  Without this flag the classes may not be regenerated if it is determined to be unnecessary.");
        opts.addFlag("basicClientJar", "Generate a client jar that does not contain deployment descriptors.");
        opts.addFlag("noObjectActivation", "No Object Activation is used.");
        opts.addFlag("convertDDs", "Convert old 1.1 deployment descriptors to 7.0. If this flag is set, ejbc invokes ddconverter to convert to 70 descriptors.");
        opts.addFlag("disableHotCodeGen", "Generate ejb stub and skel as part of ejbc. Avoid HotCodeGen to have better performance.");
        new CompilerInvoker(opts);
        opts.markPrivate("nowrite");
        opts.markPrivate("commentary");
        opts.markPrivate("nodeploy");
        opts.markPrivate("O");
        opts.markPrivate("d");
        opts.markPrivate("nocompliance");
        opts.markPrivate("noObjectActivation");
        try
        {
            opts.setFlag("nowarn", true);
        }
        catch (BadOptionException badoptionexception_1)
        {
            throw new weblogic.utils.AssertionError(badoptionexception_1);
        }
    }

    private String getSourceJarFileName(Getopt2 getopt2_1)
    {
        String[] strings_1 = getopt2_1.args();
        return strings_1[0];
    }

    private void makeOutputDir(String string_1) throws ToolFailureException
    {
        outputDir = new File(string_1);
        if (!outputDir.exists())
        {
            if (!outputDir.mkdir())
            {
                throw new ToolFailureException(new StringBuffer().append("ERROR: Ejbc ould not create temporary working directory:").append(outputDir.getAbsolutePath()).append(".  Please ensure that this directory can be created.").toString());
            }
        }
        if (!outputDir.canWrite())
        {
            throw new ToolFailureException(new StringBuffer().append("ERROR: Ejbc can not write to the temporary working directory:").append(outputDir.getAbsolutePath()).append(".  Please ensure that you have write permission for this directory.  You may also specify an alternative output directory on the weblogic.ejbc command line.").toString());
        }
    }

    private String getTargetJarFileName(Getopt2 getopt2_1) throws ToolFailureException
    {
        String[] strings_1 = getopt2_1.args();
        targetJarFileName = getopt2_1.getOption("d");
        if (null == targetJarFileName)
        {
            if (strings_1.length == 1)
            {
                targetJarFileName = strings_1[0];
            }
            else
            {
                targetJarFileName = strings_1[1];
            }
        }
        if ((targetJarFileName.endsWith(".jar")) || (targetJarFileName.endsWith(".JAR")))
        {
            outputDir = new File("ejbcgen");
            if (outputDir.exists())
            {
                FileUtils.remove(new File("ejbcgen"));
            }
            makeOutputDir("ejbcgen");
        }
        else
        {
            makeOutputDir(targetJarFileName);
            targetJarFileName = null;
        }
        return targetJarFileName;
    }

    private void validateToolInputs() throws ToolFailureException
    {
        if ((opts.args().length < 1) || (opts.args().length > 2))
        {
            opts.usageError("weblogic.ejbc");
            throw new ToolFailureException("ERROR: incorrect command-line.");
        }
        sourceJarFileName = getSourceJarFileName(opts);
        if (null == inputJar)
        {
            inputJar = new File(sourceJarFileName);
        }
        if (!inputJar.exists())
        {
            throw new ToolFailureException(new StringBuffer().append("ERROR: source file: ").append(sourceJarFileName).append(" could not be found.").toString());
        }
        if (!inputJar.isDirectory())
        {
            if (!sourceJarFileName.endsWith(".jar"))
            {
                throw new ToolFailureException("ERROR: You must specify a source directory or ejb-jar file ending with the suffix .jar to run weblogic.ejbc");
            }
        }
        targetJarFileName = getTargetJarFileName(opts);
        try
        {
            opts.setOption("d", outputDir.getPath());
        }
        catch (BadOptionException badoptionexception_1)
        {
            throw new weblogic.utils.AssertionError(badoptionexception_1);
        }
    }

    private File backupJar(File file_1) throws ToolFailureException
    {
        File file_2 = new File(new StringBuffer().append(file_1).append("SAVE").toString());
        if (file_2.exists())
        {
            if (!file_2.delete())
            {
                throw new ToolFailureException(new StringBuffer().append("ERROR: Could not delete old backup file: ").append(file_2.getAbsolutePath()).toString());
            }
        }
        try
        {
            FileUtils.copy(file_1, file_2);
        }
        catch (IOException ioexception_1)
        {
            throw new ToolFailureException(new StringBuffer().append("ERROR: Could not create a backup file ").append(file_2.getAbsolutePath()).toString());
        }
        if (!file_1.delete())
        {
            throw new ToolFailureException(new StringBuffer().append("ERROR: Could not delete previous jar ").append(file_1.getAbsolutePath()).toString());
        }
        return file_2;
    }

    private void createOutputJar(String string_1) throws ToolFailureException
    {
        File file_1 = new File(string_1);
        File file_2 = null;
        if (file_1.exists())
        {
            file_2 = backupJar(file_1);
        }
        try
        {
            JarFileUtils.createJarFileFromDirectory(string_1, outputDir);
            if (null != file_2)
            {
                file_2.delete();
            }
            FileUtils.remove(outputDir);
        }
        catch (Exception exception_1)
        {
            if (file_1.exists())
            {
                file_1.delete();
            }
            if (null != file_2)
            {
                if (file_2.exists())
                {
                    file_2.renameTo(file_1);
                    throw new ToolFailureException(new StringBuffer().append("ERROR: Could not create output jar, restoring previous jar.  The error was ").append(exception_1).toString());
                }
            }
            throw new ToolFailureException(new StringBuffer().append("ERROR: Could not create output jar.  The error was:").append(exception_1).toString());
        }
    }

    public void setClose(boolean boolean_1)
    {
        doClose = true;
    }

    public void setClassLoader(ClassLoader classloader_1)
    {
        m_classLoader = (GenericClassLoader) classloader_1;
    }

    public void setJarFile(VirtualJarFile virtualjarfile_1)
    {
        myJar = virtualjarfile_1;
    }

    public void setCreateOutputJar(boolean boolean_1)
    {
        createOutputJar = true;
    }

    public void runBody() throws ToolFailureException, ErrorCollectionException
    {
        validateToolInputs();
        VirtualJarFile virtualjarfile_1 = null;
        if (null != myJar)
        {
            virtualjarfile_1 = myJar;
        }
        else
        {
            try
            {
                virtualjarfile_1 = VirtualJarFactory.createVirtualJar(inputJar);
            }
            catch (IOException ioexception_1)
            {
                throw new ToolFailureException(new StringBuffer().append("ERROR: Error processing input Jar file: ").append(ioexception_1).toString());
            }
        }
        if ((null != targetJarFileName) || (!inputJar.equals(outputDir)))
        {
            try
            {
                if (null != outputDir)
                {
                    if (null != virtualjarfile_1)
                    {
                        inform(fmt.getExpandJar(virtualjarfile_1.getName(), outputDir.getPath()));
                        JarFileUtils.extract(virtualjarfile_1, outputDir);
                    }
                }
            }
            catch (IOException ioexception_2)
            {
                throw new ToolFailureException(new StringBuffer().append("ERROR: Error expanding input Jar file: ").append(ioexception_2).toString());
            }
        }
        if (opts.hasOption("convertDDs"))
        {
            convertOldDescriptorsToLatest(virtualjarfile_1);
        }
        if (null == ejbDescriptor)
        {
            inform(fmt.getExtractingDesc(virtualjarfile_1.getName()));
            try
            {
                ejbDescriptor = getDescriptorFromJar(virtualjarfile_1, true);
            }
            catch (ErrorCollectionException errorcollectionexception_1)
            {
                if (runFromCmdLine)
                {
                    errorcollectionexception_1.printStackTrace();
                    ErrorCollectionException errorcollectionexception_1 = formatErrorsInCollection(errorcollectionexception_1);
                    errorcollectionexception_1.add(new ToolFailureException("ERROR: ejbc couldn't load descriptor from jar"));
                }
                throw errorcollectionexception_1;
            }
        }
        ClasspathClassFinder2 classpathclassfinder2_1 = null;
        if (null == m_classLoader)
        {
            String string_1 = outputDir.getAbsolutePath();
            if (opts.hasOption("classpath"))
            {
                StringBuffer stringbuffer_1 = new StringBuffer();
                stringbuffer_1.append(string_1);
                stringbuffer_1.append(File.pathSeparator);
                stringbuffer_1.append(opts.getOption("classpath"));
                stringbuffer_1.append(File.pathSeparator);
                string_1 = stringbuffer_1.toString();
            }
            classpathclassfinder2_1 = new ClasspathClassFinder2(string_1);
            ClassLoader classloader_1 = getClass().getClassLoader();
            m_classLoader = new GenericClassLoader(classpathclassfinder2_1, classloader_1);
        }
        try
        {
            opts.setOption("classpath", m_classLoader.getClassPath());
        }
        catch (BadOptionException badoptionexception_1)
        {
            throw new weblogic.utils.AssertionError(badoptionexception_1);
        }
        EJBC ejbc_1 = EJBCFactory.createEJBC(opts);
        ejbc_1.setEJBCMessageProxy(messageCoordinator);
        ejbc_1.setCompilerFactory(compilerFactory);
        inform(fmt.getCompilingJar(virtualjarfile_1.getName()));
        try
        {
            ejbc_1.compileEJB(m_classLoader, null, ejbDescriptor, virtualjarfile_1);
        }
        catch (ErrorCollectionException errorcollectionexception_2)
        {
            if (runFromCmdLine)
            {
                ErrorCollectionException errorcollectionexception_2 = formatErrorsInCollection(errorcollectionexception_2);
                errorcollectionexception_2.add(new ToolFailureException("ERROR: ejbc couldn't invoke compiler"));
            }
            throw errorcollectionexception_2;
        }
        catch (ExecutionCancelledException executioncancelledexception_1)
        {
            if (outputDir.exists())
            {
                FileUtils.remove(new File("ejbcgen"));
            }
        }
        finally
        {
            if (doClose)
            {
                try
                {
                    virtualjarfile_1.close();
                }
                catch (Exception exception_1)
                {
                }
            }
            if (null != classpathclassfinder2_1)
            {
                classpathclassfinder2_1.close();
            }
        }
        if (null != targetJarFileName)
        {
            if (createOutputJar)
            {
                inform(fmt.getCreatingOutputJar(targetJarFileName));
                createOutputJar(targetJarFileName);
            }
        }
        if (runFromCmdLine)
        {
            System.out.println("ejbc successful.");
        }
        else
        {
            inform(new StringBuffer().append("\n").append(fmt.getEJBCSuccess()).toString());
        }
    }

    private void convertOldDescriptorsToLatest(VirtualJarFile virtualjarfile_1) throws ErrorCollectionException
    {
        EJBDescriptorBean ejbdescriptorbean_1 = null;
        try
        {
            ejbdescriptorbean_1 = getDescriptorFromJar(virtualjarfile_1, false);
        }
        catch (ErrorCollectionException errorcollectionexception_1)
        {
            if (runFromCmdLine)
            {
                ErrorCollectionException errorcollectionexception_1 = formatErrorsInCollection(errorcollectionexception_1);
                errorcollectionexception_1.add(new ToolFailureException("ERROR: ejbc couldn't find descriptor"));
            }
            throw errorcollectionexception_1;
        }
        try
        {
            ProcessorFactory processorfactory_1 = new ProcessorFactory();
            processorfactory_1.setValidating(false);
            if (runFromCmdLine)
            {
                System.out.println("Converting old descriptor files");
            }
            EJBDescriptorMBeanUtils.loadWeblogicRDBMSJarMBeans(ejbdescriptorbean_1, virtualjarfile_1, processorfactory_1, false);
        }
        catch (Exception exception_1)
        {
            ErrorCollectionException errorcollectionexception_2 = new ErrorCollectionException();
            errorcollectionexception_2.add(exception_1);
            errorcollectionexception_2 = formatErrorsInCollection(errorcollectionexception_2);
            errorcollectionexception_2.add(new ToolFailureException("ERROR: ejbc couldn't load MBeans"));
            throw errorcollectionexception_2;
        }
        try
        {
            DDConverter.convertTo11Latest(ejbdescriptorbean_1);
        }
        catch (Exception exception_2)
        {
            ErrorCollectionException errorcollectionexception_3 = new ErrorCollectionException();
            errorcollectionexception_3.add(exception_2);
            errorcollectionexception_3 = formatErrorsInCollection(errorcollectionexception_3);
            errorcollectionexception_3.add(new ToolFailureException("ERROR: ejbc couldn't convert old decsriptors"));
            throw errorcollectionexception_3;
        }
        persistNewDescriptors(ejbdescriptorbean_1);
    }

    private void persistNewDescriptors(EjbDescriptorBean ejbdescriptorbean_1) throws ErrorCollectionException
    {
        try
        {
            renameOldDescriptors();
            ejbdescriptorbean_1.usePersistenceDestination(outputDir.getAbsolutePath());
            ejbdescriptorbean_1.persist();
        }
        catch (IOException ioexception_1)
        {
            ErrorCollectionException errorcollectionexception_1 = new ErrorCollectionException();
            errorcollectionexception_1.add(ioexception_1);
            errorcollectionexception_1 = formatErrorsInCollection(errorcollectionexception_1);
            errorcollectionexception_1.add(new ToolFailureException("ERROR: ejbc couldn't rename decsriptors"));
            throw errorcollectionexception_1;
        }
    }

    private void renameOldDescriptors()
    {
        File file_1 = new File(outputDir.getAbsolutePath());
        String[] strings_1 = file_1.list();
        int int_1 = 0;
        while (int_1 < strings_1.length)
        {
            System.out.println(new StringBuffer().append("the file names are ").append(strings_1[int_1]).toString());
            while ((strings_1[int_1].equalsIgnoreCase("META-INF")) && (null.isDirectory()))
            {
                String[] strings_2 = null.list();
                int int_2 = 0;
                if (!(int_2 < strings_2.length))
                {
                    System.out.println(new StringBuffer().append("the xml file names are ").append(strings_2[int_2]).toString());
                    if ((strings_2[int_2].equalsIgnoreCase("ejb-jar.xml")) || (strings_2[int_2].equalsIgnoreCase("weblogic-ejb-jar.xml")) || (strings_2[int_2].equalsIgnoreCase("weblogic-cmp-rdbms-jar.xml")))
                    {
                        String string_1 = new StringBuffer().append(null.getAbsolutePath()).append(System.getProperty("file.separator")).append(strings_2[int_2]).toString();
                        new File(string_1).renameTo(new File(new StringBuffer().append(string_1).append(".old").toString()));
                    }
                    int_2++;
                    continue;
                    break;
                }
            }
            int_1++;
        }
    }

    public ErrorCollectionException formatErrorsInCollection(ErrorCollectionException errorcollectionexception_1)
    {
        Collection collection_1 = errorcollectionexception_1.getExceptions();
        ErrorCollectionException errorcollectionexception_2 = new ErrorCollectionException(errorcollectionexception_1.getBaseMessage());
        String string_1 = null;
        Iterator iterator_1 = collection_1.iterator();
        while (iterator_1.hasNext())
        {
            Throwable throwable_1 = (Throwable) iterator_1.next();
            string_1 = formatExceptionMessage(throwable_1);
            errorcollectionexception_2.add(new ToolFailureException(string_1));
        }
        return errorcollectionexception_2;
    }

    public String formatExceptionMessage(Throwable throwable_1)
    {
        String string_1 = new StringBuffer().append(throwable_1.getMessage()).append("\n").toString();
        String string_2 = "ERROR: Error from ejbc: ";
        StringBuffer stringbuffer_1 = new StringBuffer();
        if (throwable_1 instanceof ToolFailureException)
        {
            stringbuffer_1.append(string_1);
        }
        else
        {
            stringbuffer_1.append(string_2);
            if (throwable_1 instanceof ClassNotFoundException)
            {
                stringbuffer_1.append(new StringBuffer().append("Unable to load a class specified in your ejb-jar.xml: ").append(string_1).toString());
            }
            else if (throwable_1 instanceof XMLProcessingException)
            {
                XMLProcessingException xmlprocessingexception_1 = (XMLProcessingException) throwable_1;
                stringbuffer_1.append(new StringBuffer().append("Error processing '").append(xmlprocessingexception_1.getFileName()).append("': ").append(string_1).toString());
            }
            else
            {
                stringbuffer_1.append(string_1);
            }
            if ((opts.hasOption("verbose")) || (null == string_1) || (isBug(throwable_1)))
            {
                stringbuffer_1.append(new StringBuffer().append("\n").append(StackTraceUtils.throwable2StackTrace(throwable_1)).toString());
            }
        }
        return stringbuffer_1.toString();
    }

    private EjbDescriptorBean getDescriptorFromJar(VirtualJarFile virtualjarfile_1, boolean boolean_1) throws ErrorCollectionException
    {
        ErrorCollectionException errorcollectionexception_1 = new ErrorCollectionException();
        EjbDescriptorBean ejbdescriptorbean_1 = null;
        try
        {
            if (boolean_1)
            {
                ejbdescriptorbean_1 = DDUtils.createReadOnlyDescriptorFromJarFile(virtualjarfile_1);
            }
            else
            {
                ejbdescriptorbean_1 = DDUtils.createDescriptorFromJarFile(virtualjarfile_1);
            }
        }
        catch (XMLProcessingException xmlprocessingexception_1)
        {
            errorcollectionexception_1.add(new ToolFailureException(new StringBuffer().append("ERROR: ejbc found errors while processing the descriptor for ").append(sourceJarFileName).append(": \n").toString()));
            errorcollectionexception_1.add(xmlprocessingexception_1);
            throw errorcollectionexception_1;
        }
        catch (XMLParsingException xmlparsingexception_1)
        {
            errorcollectionexception_1.add(new ToolFailureException(new StringBuffer().append("ERROR: ejbc found errors while parsing the descriptor for ").append(sourceJarFileName).append(": \n").toString()));
            errorcollectionexception_1.add(xmlparsingexception_1);
            throw errorcollectionexception_1;
        }
        catch (Exception exception_1)
        {
            errorcollectionexception_1.add(new ToolFailureException(new StringBuffer().append("ERROR: Error creating descriptor from jar file ").append(sourceJarFileName).append(": ").toString()));
            errorcollectionexception_1.add(exception_1);
            throw errorcollectionexception_1;
        }
        return ejbdescriptorbean_1;
    }

    private boolean isBug(Throwable throwable_1)
    {
        int int_1 = 0;
        while (int_1 < bugs.length)
        {
            if (bugs[int_1].isAssignableFrom(throwable_1.getClass()))
            {
                return true;
            }
            int_1++;
        }
        return false;
    }

    private void inform(String string_1)
    {
        if (null != listener)
        {
            listener.update(string_1);
        }
    }

    public ICompilerFactory getCompilerFactory()
    {
        return compilerFactory;
    }

    public void setCompilerFactory(ICompilerFactory icompilerfactory_1)
    {
        compilerFactory = icompilerfactory_1;
    }

    public static void main(String[] strings_1) throws Exception
    {
        System.out.println("\nDEPRECATED: The weblogic.ejbc20 compiler is deprecated and will be removed in a future version of WebLogic Server.  Please use weblogic.ejbc instead.\n");
        new ejbc20(strings_1).run();
    }

}
