This Class  : ru.andrew.jclazz.apps.tester.tests.blocks.IfElseGeneric
Super Class : java.lang.Object
Implemented Interfaces:

Version: 46.0
JVM supported: 1.2 and greater

Access Flags: 33 ( PUBLIC  SUPER )

Attributes:

Fields:
k : int
{
    Access Flags: 2 ( PRIVATE )

    Attributes:
}

t : boolean
{
    Access Flags: 0 ()

    Attributes:
}


Methods:
<init> : () : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 1
        Max locals = 1
        Attributes:
        Exceptions:
       )
    {
        0 aload_0
        1 invokespecial <init>
        4 return
    }
}

test1 : (java.util.List) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 2
        Attributes:
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "BEFORE IF" (java.lang.String)
        5 invokevirtual println
        8 aload_1
        9 instanceof java.util.ArrayList
        12 ifeq 23
        15 getstatic java.lang.System.out
        18 ldc "TRUE" (java.lang.String)
        20 invokevirtual println
        23 getstatic java.lang.System.out
        26 ldc "AFTER IF" (java.lang.String)
        28 invokevirtual println
        31 return
    }
}

test2 : (java.util.List) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 2
        Attributes:
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "BEFORE IF" (java.lang.String)
        5 invokevirtual println
        8 aload_1
        9 instanceof java.util.ArrayList
        12 ifeq 26
        15 getstatic java.lang.System.out
        18 ldc "TRUE" (java.lang.String)
        20 invokevirtual println
        23 goto 34
        26 getstatic java.lang.System.out
        29 ldc "FALSE" (java.lang.String)
        31 invokevirtual println
        34 getstatic java.lang.System.out
        37 ldc "AFTER IF" (java.lang.String)
        39 invokevirtual println
        42 return
    }
}

test3 : (java.util.List, int) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 3
        Attributes:
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "BEFORE IF" (java.lang.String)
        5 invokevirtual println
        8 aload_1
        9 instanceof java.util.ArrayList
        12 ifeq 32
        15 iload_2
        16 bipush 10 (int)
        18 if_icmple 32
        21 getstatic java.lang.System.out
        24 ldc "IF" (java.lang.String)
        26 invokevirtual println
        29 goto 57
        32 iload_2
        33 bipush 10 (int)
        35 if_icmpgt 49
        38 getstatic java.lang.System.out
        41 ldc "ELSEIF" (java.lang.String)
        43 invokevirtual println
        46 goto 57
        49 getstatic java.lang.System.out
        52 ldc "ELSE" (java.lang.String)
        54 invokevirtual println
        57 getstatic java.lang.System.out
        60 ldc "AFTER IF" (java.lang.String)
        62 invokevirtual println
        65 return
    }
}

test4 : (java.util.List, int) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 3
        Attributes:
        Exceptions:
       )
    {
        0 getstatic java.lang.System.out
        3 ldc "BEFORE IF" (java.lang.String)
        5 invokevirtual println
        8 aload_1
        9 instanceof java.util.ArrayList
        12 ifeq 32
        15 iload_2
        16 bipush 10 (int)
        18 if_icmple 32
        21 getstatic java.lang.System.out
        24 ldc "IF" (java.lang.String)
        26 invokevirtual println
        29 goto 46
        32 iload_2
        33 bipush 10 (int)
        35 if_icmpgt 46
        38 getstatic java.lang.System.out
        41 ldc "ELSEIF" (java.lang.String)
        43 invokevirtual println
        46 getstatic java.lang.System.out
        49 ldc "AFTER IF" (java.lang.String)
        51 invokevirtual println
        54 return
    }
}

test5 : (long) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 4
        Max locals = 3
        Attributes:
        Exceptions:
       )
    {
        0 lload_1
        1 ldc2_w 17L (long)
        4 lcmp
        5 ifne 16
        8 getstatic java.lang.System.out
        11 ldc "lcmp" (java.lang.String)
        13 invokevirtual println
        16 return
    }
}

test6 : (double) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 4
        Max locals = 3
        Attributes:
        Exceptions:
       )
    {
        0 dload_1
        1 ldc2_w 2.0 (double)
        4 dcmpg
        5 ifge 16
        8 getstatic java.lang.System.out
        11 ldc "dcmpl" (java.lang.String)
        13 invokevirtual println
        16 return
    }
}

test7 : (java.lang.String) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 2
        Attributes:
        Exceptions:
       )
    {
        0 aload_1
        1 ldc "" (java.lang.String)
        3 if_acmpne 14
        6 getstatic java.lang.System.out
        9 ldc "==" (java.lang.String)
        11 invokevirtual println
        14 getstatic java.lang.System.out
        17 ldc "IF" (java.lang.String)
        19 invokevirtual println
        22 aload_1
        23 ldc "" (java.lang.String)
        25 if_acmpeq 36
        28 getstatic java.lang.System.out
        31 ldc "!=" (java.lang.String)
        33 invokevirtual println
        36 return
    }
}

test8 : (int) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 2
        Attributes:
        Exceptions:
       )
    {
        0 iload_1
        1 bipush 10 (int)
        3 if_icmpne 6
        6 getstatic java.lang.System.out
        9 ldc "A" (java.lang.String)
        11 invokevirtual println
        14 return
    }
}

test9 : (boolean) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 1
        Max locals = 3
        Attributes:
        Exceptions:
       )
    {
        0 iconst_0
        1 istore_2
        2 iload_1
        3 ifeq 10
        6 iconst_1
        7 goto 11
        10 iconst_m1
        11 istore_2
        12 return
    }
}

test10 : (boolean) : boolean
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 1
        Max locals = 2
        Attributes:
        Exceptions:
       )
    {
        0 iload_1
        1 ifeq 8
        4 iconst_0
        5 goto 9
        8 iconst_1
        9 ireturn
    }
}

intVal1 : () : int
{
    Access Flags: 258 ( PRIVATE  NATIVE )

    Attributes:
}

intVal2 : () : int
{
    Access Flags: 258 ( PRIVATE  NATIVE )

    Attributes:
}

test11 : (boolean) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 1
        Max locals = 3
        Attributes:
        Exceptions:
       )
    {
        0 iconst_0
        1 istore_2
        2 iload_1
        3 ifeq 13
        6 aload_0
        7 invokespecial intVal1
        10 goto 17
        13 aload_0
        14 invokespecial intVal2
        17 istore_2
        18 return
    }
}

test12 : (boolean) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 2
        Attributes:
        Exceptions:
       )
    {
        0 aload_0
        1 iload_1
        2 ifeq 12
        5 aload_0
        6 invokespecial intVal1
        9 goto 16
        12 aload_0
        13 invokespecial intVal2
        16 putfield k
        19 return
    }
}

test13 : (int) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 2
        Max locals = 2
        Attributes:
        Exceptions:
       )
    {
        0 iconst_0
        1 iload_1
        2 if_icmple 6
        5 return
        6 getstatic java.lang.System.out
        9 ldc "TESTTTT" (java.lang.String)
        11 invokevirtual println
        14 return
    }
}

ipaddr : (java.lang.String, int) : java.lang.String
{
    Access Flags: 258 ( PRIVATE  NATIVE )

    Attributes:
}

test14 : (int) : void
{
    Access Flags: 1 ( PUBLIC )

    Attributes:
    CODE
       (
        Max stack = 6
        Max locals = 4
        Attributes:
        Exceptions:
       )
    {
        0 ldc2_w 100L (long)
        3 lstore_2
        4 getstatic java.lang.System.out
        7 new java.lang.StringBuffer
        10 dup
        11 invokespecial <init>
        14 ldc "PKT:" (java.lang.String)
        16 invokevirtual append
        19 iload_1
        20 bipush 8 (int)
        22 if_icmpne 65
        25 new java.lang.StringBuffer
        28 dup
        29 invokespecial <init>
        32 aload_0
        33 ldc "1" (java.lang.String)
        35 bipush 26 (int)
        37 invokespecial ipaddr
        40 invokevirtual append
        43 ldc "-" (java.lang.String)
        45 invokevirtual append
        48 aload_0
        49 ldc "33" (java.lang.String)
        51 bipush 30 (int)
        53 invokespecial ipaddr
        56 invokevirtual append
        59 invokevirtual toString
        62 goto 67
        65 ldc "" (java.lang.String)
        67 invokevirtual append
        70 ldc " (" (java.lang.String)
        72 invokevirtual append
        75 lload_2
        76 invokevirtual append
        79 ldc "," (java.lang.String)
        81 invokevirtual append
        84 invokevirtual toString
        87 invokevirtual println
        90 return
    }
}

Constant Pool:
0: 
1: Methodref: java.lang.Object.<init> (()V)
2: Fieldref: java.io.PrintStream
3: String: "BEFORE IF"
4: Methodref: java.io.PrintStream.println ((Ljava/lang/String;)V)
5: Class: java.util.ArrayList
6: String: "TRUE"
7: String: "AFTER IF"
8: String: "FALSE"
9: String: "IF"
10: String: "ELSEIF"
11: String: "ELSE"
12: Long: 17L
13: 
14: String: "lcmp"
15: Double: 2.0
16: 
17: String: "dcmpl"
18: String: ""
19: String: "=="
20: String: "!="
21: String: "A"
22: Methodref: ru.andrew.jclazz.apps.tester.tests.blocks.IfElseGeneric.intVal1 (()I)
23: Methodref: ru.andrew.jclazz.apps.tester.tests.blocks.IfElseGeneric.intVal2 (()I)
24: Fieldref: int
25: String: "TESTTTT"
26: Long: 100L
27: 
28: Class: java.lang.StringBuffer
29: Methodref: java.lang.StringBuffer.<init> (()V)
30: String: "PKT:"
31: Methodref: java.lang.StringBuffer.append ((Ljava/lang/String;)Ljava/lang/StringBuffer;)
32: String: "1"
33: Methodref: ru.andrew.jclazz.apps.tester.tests.blocks.IfElseGeneric.ipaddr ((Ljava/lang/String;I)Ljava/lang/String;)
34: String: "-"
35: String: "33"
36: Methodref: java.lang.StringBuffer.toString (()Ljava/lang/String;)
37: String: " ("
38: Methodref: java.lang.StringBuffer.append ((J)Ljava/lang/StringBuffer;)
39: String: ","
40: Class: ru.andrew.jclazz.apps.tester.tests.blocks.IfElseGeneric
41: Class: java.lang.Object
42: Utf8: k
43: Utf8: I
44: Utf8: t
45: Utf8: Z
46: Utf8: <init>
47: Utf8: ()V
48: Utf8: Code
49: Utf8: test1
50: Utf8: (Ljava/util/List;)V
51: Utf8: test2
52: Utf8: test3
53: Utf8: (Ljava/util/List;I)V
54: Utf8: test4
55: Utf8: test5
56: Utf8: (J)V
57: Utf8: test6
58: Utf8: (D)V
59: Utf8: test7
60: Utf8: (Ljava/lang/String;)V
61: Utf8: test8
62: Utf8: (I)V
63: Utf8: test9
64: Utf8: (Z)V
65: Utf8: test10
66: Utf8: (Z)Z
67: Utf8: intVal1
68: Utf8: ()I
69: Utf8: intVal2
70: Utf8: test11
71: Utf8: test12
72: Utf8: test13
73: Utf8: ipaddr
74: Utf8: (Ljava/lang/String;I)Ljava/lang/String;
75: Utf8: test14
76: NameAndType: <init> (()V)
77: Class: java.lang.System
78: NameAndType: out (Ljava/io/PrintStream;)
79: Utf8: BEFORE IF
80: Class: java.io.PrintStream
81: NameAndType: println ((Ljava/lang/String;)V)
82: Utf8: java/util/ArrayList
83: Utf8: TRUE
84: Utf8: AFTER IF
85: Utf8: FALSE
86: Utf8: IF
87: Utf8: ELSEIF
88: Utf8: ELSE
89: Utf8: lcmp
90: Utf8: dcmpl
91: Utf8: 
92: Utf8: ==
93: Utf8: !=
94: Utf8: A
95: NameAndType: intVal1 (()I)
96: NameAndType: intVal2 (()I)
97: NameAndType: k (I)
98: Utf8: TESTTTT
99: Utf8: java/lang/StringBuffer
100: Utf8: PKT:
101: NameAndType: append ((Ljava/lang/String;)Ljava/lang/StringBuffer;)
102: Utf8: 1
103: NameAndType: ipaddr ((Ljava/lang/String;I)Ljava/lang/String;)
104: Utf8: -
105: Utf8: 33
106: NameAndType: toString (()Ljava/lang/String;)
107: Utf8:  (
108: NameAndType: append ((J)Ljava/lang/StringBuffer;)
109: Utf8: ,
110: Utf8: ru/andrew/jclazz/apps/tester/tests/blocks/IfElseGeneric
111: Utf8: java/lang/Object
112: Utf8: java/lang/System
113: Utf8: out
114: Utf8: Ljava/io/PrintStream;
115: Utf8: java/io/PrintStream
116: Utf8: println
117: Utf8: append
118: Utf8: (Ljava/lang/String;)Ljava/lang/StringBuffer;
119: Utf8: toString
120: Utf8: ()Ljava/lang/String;
121: Utf8: (J)Ljava/lang/StringBuffer;
