package ru.andrew.jclazz.gui;

import java.awt.Toolkit;
import java.awt.datatransfer.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import ru.andrew.jclazz.core.Clazz;
import ru.andrew.jclazz.decompiler.ClazzSourceView;
import ru.andrew.jclazz.decompiler.ClazzSourceViewFactory;

public class DecompileForm extends JDialog implements ClipboardOwner
{
    private Clazz clazz;
    private String source;

    public DecompileForm()
    {
        initComponents();

        setContentPane(decompilePanel);
    }

    public void lostOwnership(Clipboard clipboard, Transferable contents)
    {
        // Do nothing
    }

    public void setClazz(Clazz clazz)
    {
        this.clazz = clazz;
        setTitle(clazz.getThisClassInfo().getFullyQualifiedName());

        decompile(null);
    }

    private void decompile(Map params)
    {
        ClazzSourceView csv = ClazzSourceViewFactory.getClazzSourceView(clazz);
        csv.setDecompileParameters(params);
        source = csv.getSource();

        String sourceText = source;

        sourceText = sourceText.replaceAll("\n", "<BR>");
        sourceText = sourceText.replaceAll(" ", "&nbsp;");
        sourcePane.setText(sourceText);
    }

    private void saveToFile()
    {
        JFileChooser chooser = new JFileChooser();
        String saveName = clazz.getFileName();
        saveName = saveName.substring(0, saveName.lastIndexOf('.')) + ".java";
        File exportFile = new File(saveName);
        chooser.setSelectedFile(exportFile);

        int returnVal = chooser.showSaveDialog(this);
        if(returnVal != JFileChooser.APPROVE_OPTION)
        {
            JOptionPane.showMessageDialog(this, "No file specified", "Try again...", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try
        {
            PrintWriter pw = new PrintWriter(new FileOutputStream(exportFile));
            pw.println(source);
            pw.close();
        }
        catch (IOException ioe)
        {
            JOptionPane.showMessageDialog(this, ioe.toString(), "Input/Output Exception", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        decompilePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        sourcePane = new javax.swing.JTextPane();
        optionsPanel = new javax.swing.JPanel();
        lvNamingLabel = new javax.swing.JLabel();
        lvNamingTypeComboBox = new javax.swing.JComboBox();
        singleImportCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        savaAsMenuItem = new javax.swing.JMenuItem();
        CtrlCMenuItem = new javax.swing.JMenuItem();

        setName("decompileFrame"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        decompilePanel.setLayout(new java.awt.GridBagLayout());

        sourcePane.setContentType("text/html");
        jScrollPane2.setViewportView(sourcePane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        decompilePanel.add(jScrollPane2, gridBagConstraints);

        optionsPanel.setMaximumSize(new java.awt.Dimension(240, 32767));
        optionsPanel.setMinimumSize(new java.awt.Dimension(240, 300));
        optionsPanel.setPreferredSize(new java.awt.Dimension(240, 22));
        optionsPanel.setLayout(new java.awt.GridBagLayout());

        lvNamingLabel.setText("Local Variable Naming");
        lvNamingLabel.setAlignmentX(1.0F);
        lvNamingLabel.setAlignmentY(0.0F);
        lvNamingLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        lvNamingLabel.setMaximumSize(new java.awt.Dimension(103, 23));
        lvNamingLabel.setMinimumSize(new java.awt.Dimension(103, 23));
        lvNamingLabel.setPreferredSize(new java.awt.Dimension(111, 23));
        lvNamingLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        optionsPanel.add(lvNamingLabel, gridBagConstraints);

        lvNamingTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "By Variable Type", "Camel Naming" }));
        lvNamingTypeComboBox.setAlignmentY(0.0F);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        optionsPanel.add(lvNamingTypeComboBox, gridBagConstraints);

        singleImportCheckBox.setText("use single imports");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        optionsPanel.add(singleImportCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 100.0;
        optionsPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        decompilePanel.add(optionsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(decompilePanel, gridBagConstraints);

        jMenu2.setText("Edit");

        savaAsMenuItem.setText("Save as...");
        savaAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savaAsMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(savaAsMenuItem);

        CtrlCMenuItem.setText("Copy to Clipboard");
        CtrlCMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CtrlCMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(CtrlCMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void savaAsMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_savaAsMenuItemActionPerformed
    {//GEN-HEADEREND:event_savaAsMenuItemActionPerformed
        saveToFile();
    }//GEN-LAST:event_savaAsMenuItemActionPerformed

    private void CtrlCMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CtrlCMenuItemActionPerformed
    {//GEN-HEADEREND:event_CtrlCMenuItemActionPerformed
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(source), this);
    }//GEN-LAST:event_CtrlCMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CtrlCMenuItem;
    private javax.swing.JPanel decompilePanel;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lvNamingLabel;
    private javax.swing.JComboBox lvNamingTypeComboBox;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JMenuItem savaAsMenuItem;
    private javax.swing.JCheckBox singleImportCheckBox;
    private javax.swing.JTextPane sourcePane;
    // End of variables declaration//GEN-END:variables

}
